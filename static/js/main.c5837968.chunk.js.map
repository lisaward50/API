{"version":3,"sources":["Nav/index.jsx","Currencies/index.jsx","App/index.jsx","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","id","className","href","Component","Currencies","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","valueEntered","rateGBP","rateEUR","rateCAD","rateJPY","rateHKD","rateAUD","handleUserInput","bind","assertThisInitialized","getRates","e","setState","target","value","axios","get","response","data","rates","GBP","EUR","CAD","JPY","HKD","AUD","_this$state","onChange","type","toFixed","App","src_Nav","src_Currencies","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5837968.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav id=\"navbar\" className=\"navbar fixed-top navbar-expand-md navbar-dark py-0\">\n        <a className=\"navbar-brand\" href=\"#\">FX/CONV</a>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Currencies extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      valueEntered: 0,\n      rateGBP: 0,\n      rateEUR: 0,\n      rateCAD: 0,\n      rateJPY: 0,\n      rateHKD: 0,\n      rateAUD: 0,\n    }\n    this.handleUserInput = this.handleUserInput.bind(this);\n    this.getRates = this.getRates.bind(this);\n  }\n\n  handleUserInput(e) {\n    this.setState ({\n      valueEntered: e.target.value,\n    });\n  }\n\n  async getRates() {\n    const api_end = 'https://api.exchangeratesapi.io/latest?base=USD';\n    const response = await axios.get(api_end)\n    const rateGBP = response.data.rates.GBP;\n    const rateEUR = response.data.rates.EUR;\n    const rateCAD = response.data.rates.CAD;\n    const rateJPY = response.data.rates.JPY;\n    const rateHKD = response.data.rates.HKD;\n    const rateAUD = response.data.rates.AUD;\n    this.setState({\n      rateGBP: rateGBP,\n      rateEUR: rateEUR,\n      rateCAD: rateCAD,\n      rateJPY: rateJPY,\n      rateHKD: rateHKD,\n      rateAUD: rateAUD,\n    });\n  }\n\n  componentDidMount() {\n    this.getRates();\n  }\n\n  render() {\n    const { rateGBP, rateEUR, rateCAD, rateJPY, rateHKD, rateAUD, valueEntered } = this.state;\n    return(\n      <div className=\"container\">\n        <h1>CURRENCY <span className=\"text-white\">CONVERTER</span></h1>\n        <br/>\n        <p>Enter a figure in dollars and see how much you have in other currencies...</p>\n        <div>\n           &nbsp; &nbsp; <span className=\"text-white\">USD</span> &nbsp;\n           <input onChange={ this.handleUserInput } type=\"text\"/> &nbsp; is equal to:\n         <br/>\n         <br/>\n         <div className=\"row\">\n           <div className=\"col-sm-6 col-md-4\">\n             <p><span className=\"text-white\">GBP</span> &nbsp;\n             {(rateGBP * valueEntered).toFixed(2)}&nbsp; &nbsp; &nbsp;</p>\n           </div>\n           <div className=\"col-sm-6 col-md-4\">\n             <p><span className=\"text-white\">EUR</span> &nbsp;\n             {(rateEUR * valueEntered).toFixed(2)}&nbsp; &nbsp; &nbsp;</p>\n           </div>\n           <div className=\"col-sm-6 col-md-4\">\n             <p><span className=\"text-white\">CAD</span> &nbsp;\n             {(rateCAD * valueEntered).toFixed(2)}&nbsp; &nbsp; &nbsp;</p>\n           </div>\n           <div className=\"col-sm-6 col-md-4\">\n             <p><span className=\"text-white\">JPY</span> &nbsp;\n             {(rateJPY * valueEntered).toFixed(2)}&nbsp; &nbsp; &nbsp;</p>\n           </div>\n           <div className=\"col-sm-6 col-md-4\">\n             <p><span className=\"text-white\">HKD</span> &nbsp;\n             {(rateHKD * valueEntered).toFixed(2)}&nbsp; &nbsp; &nbsp;</p>\n           </div>\n          <div className=\"col-sm-6 col-md-4\">\n             <p><span className=\"text-white\">AUD</span> &nbsp;\n             {(rateAUD * valueEntered).toFixed(2)}&nbsp; &nbsp; &nbsp;</p>\n          </div>\n         </div>\n        </div>\n      </div>\n      )\n  }\n}\n\nexport default Currencies;\n","import React, { Component } from 'react';\nimport Nav from '../Nav';\nimport Currencies from '../Currencies';\nimport './style.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n        <div className=\"buffer\"></div>\n        <Currencies />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}